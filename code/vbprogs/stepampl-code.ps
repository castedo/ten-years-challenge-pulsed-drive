%!PS-Adobe-3.0
%%Creator: Windows PSCRIPT
%%Title: Microsoft Visual Basic
%%BoundingBox: 18 9 593 784
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: (atend)
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#88/circumflex 16#89/perthousand
16#8A/Scaron 16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright
16#93/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#98/tilde 16#99/trademark 16#9A/scaron 16#9B/guilsinglright
16#9C/oe 16#9F/Ydieresis 16#A0/space 16#A1/exclamdown 16#A4/currency
16#A5/yen 16#A6/brokenbar 16#A7/section 16#A8/dieresis 16#A9/copyright
16#AA/ordfeminine 16#AB/guillemotleft 16#AC/logicalnot 16#AD/hyphen
16#AE/registered 16#AF/macron 16#B0/degree 16#B1/plusminus 16#B2/twosuperior
16#B3/threesuperior 16#B4/acute 16#B5/mu 16#B6/paragraph 16#B7/periodcentered
16#B8/cedilla 16#B9/onesuperior 16#BA/ordmasculine 16#BB/guillemotright
16#BC/onequarter 16#BD/onehalf 16#BE/threequarters 16#BF/questiondown
16#C0/Agrave 16#C1/Aacute 16#C2/Acircumflex 16#C3/Atilde 16#C4/Adieresis
16#C5/Aring 16#C6/AE 16#C7/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA
/Ecircumflex 16#CB/Edieresis 16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex
16#CF/Idieresis 16#D0/Eth 16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4
/Ocircumflex 16#D5/Otilde 16#D6/Odieresis 16#D7/multiply 16#D8/Oslash
16#D9/Ugrave 16#DA/Uacute 16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute
16#DE/Thorn 16#DF/germandbls 16#E0/agrave 16#E1/aacute 16#E2/acircumflex
16#E3/atilde 16#E4/adieresis 16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8
/egrave 16#E9/eacute 16#EA/ecircumflex 16#EB/edieresis 16#EC/igrave
16#ED/iacute 16#EE/icircumflex 16#EF/idieresis 16#F0/eth 16#F1/ntilde
16#F2/ograve 16#F3/oacute 16#F4/ocircumflex 16#F5/otilde 16#F6/odieresis
16#F7/divide 16#F8/oslash 16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex
16#FC/udieresis 16#FD/yacute 16#FE/thorn 16#FF/ydieresis ] def/reencdict
12 dict def/IsChar{basefontdict/CharStrings get exch known}bd/MapCh{dup
IsChar not{pop/bullet}if newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0
/degree IsChar{/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar
IsChar{/brokenbar}{/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname
ed/basefontname ed FontDirectory newfontname known not{/basefontdict
basefontname findfont def/newfont basefontdict maxlength dict def basefontdict{exch
dup/FID ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll
put}{exch newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont
/FontName newfontname put 127 1 159{newfont/Encoding get exch/bullet
put}for ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree
MapBB newfontname newfont definefont pop}if newfontname end}bd/SB{FC
/ULlen ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed
/dxGdi ed/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1
mul x1 x1 mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch
y1 mul cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra
ed/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
/SVDoc save def
%%EndProlog
%%BeginSetup
Win35Dict begin
ErrHandler
statusdict begin 0 setjobtimeout end
statusdict begin statusdict /jobname (Microsoft Visual Basic) put end
/oldDictCnt countdictstack def {}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
/oldDictCnt countdictstack def {letter
}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
[
{mark 1.0 1.0 .98 .9 .82 .68 .56 .48 .28 .1 .06 .0 counttomark dup 3 add -1 roll exch 2 sub mul dup floor cvi dup 3 1 roll sub exch dup  3 add index exch 2 add index dup 4 1 roll sub mul add counttomark 1 add 1 roll  cleartomark } bind
/exec load currenttransfer /exec load] cvx settransfer
%%EndSetup
%%Page: 1 1
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
0 0 525 ('--- Global constants) 525 SB
0 42 550 (Global Const TRUE = -1) 550 SB
0 84 550 (Global Const FALSE = 0) 550 SB
0 126 700 (Global Const NOSTEP = -32768) 700 SB
0 168 325 ('  - Warning!) 325 SB
0 210 1000 ('  - MAX_ELEMENTS      must be <= 16.000) 1000 SB
0 252 1000 ('  - MAX_STEP*MAX_FILE must be <= 16.000) 1000 SB
0 294 825 (Global Const MAX_ELEMENTS = 10000) 825 SB
0 336 650 (Global Const MAX_STEP = 50) 650 SB
0 378 675 (Global Const MAX_FILE = 100) 675 SB
0 420 475 ('  - format strings) 475 SB
0 462 650 (Global Const F3_0$ = "000") 650 SB
0 504 725 (Global Const F6_4$ = "0.0000") 725 SB
0 588 525 ('--- Global variables) 525 SB
0 630 600 (Global CANCEL As Integer) 600 SB
0 672 625 (Global BOTHDIR As Integer) 625 SB
0 714 575 (Global NLIST As Integer) 575 SB
0 798 725 (Global ALPHA_DC_MIN As Single) 725 SB
0 840 725 (Global ALPHA_DC_MAX As Single) 725 SB
0 882 600 (Global OMEGA_C As Single) 600 SB
0 924 525 (Global EPS  As Single) 525 SB
0 1008 750 (Global STEP_HEIGHT\(\) As Single) 750 SB
0 1050 600 (Global FILES\(\) As String) 600 SB
0 1092 300 (Global CRLF$) 300 SB
0 1134 225 (Global T$) 225 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 2 2
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
0 84 400 (Sub Form_Load \(\)) 400 SB
0 126 575 (    Drive.Drive = "c:\\") 575 SB
0 168 1175 (    Directory.Path = "c:\\fortran\\programs\\data") 1175 SB
0 210 975 (    TextDirectory.Text = Directory.Path) 975 SB
0 252 100 (    ) 100 SB
0 294 750 (    File.Path = Directory.Path) 750 SB
0 336 650 (    File.Pattern = "*.out") 650 SB
0 378 900 (    TextFilename.Text = File.Pattern) 900 SB
0 420 175 (End Sub) 175 SB
0 504 475 (Sub Drive_Change \(\)) 475 SB
0 546 800 (    Directory.Path = Drive.Drive) 800 SB
0 588 175 (End Sub) 175 SB
0 672 575 (Sub Directory_Change \(\)) 575 SB
0 714 750 (    File.Path = Directory.Path) 750 SB
0 756 975 (    TextDirectory.Text = Directory.Path) 975 SB
0 798 650 (    CommandRemoveAll_Click) 650 SB
0 840 175 (End Sub) 175 SB
0 924 650 (Sub TextFilename_Change \(\)) 650 SB
0 966 900 (    File.Pattern = TextFilename.Text) 900 SB
0 1008 175 (End Sub) 175 SB
0 1092 650 (Sub CommandCancel_Click \(\)) 650 SB
0 1134 200 (    Beep) 200 SB
0 1176 425 (    CANCEL = TRUE) 425 SB
0 1218 425 (    Loadfile.Hide) 425 SB
0 1260 525 (    StepAmpl.SetFocus) 525 SB
0 1302 175 (End Sub) 175 SB
0 1386 575 (Sub CommandAdd_Click \(\)) 575 SB
0 1428 625 (    Dim exists As Integer) 625 SB
0 1470 500 (    Dim i As Integer) 500 SB
0 1512 600 (    Dim ntemp As Integer) 600 SB
0 1596 875 (    ntemp = ListFiles.ListCount - 1) 875 SB
0 1680 1425 ('-- check wheter file has already been inserted into list) 1425 SB
0 1722 550 (    For i = 0 To ntemp) 550 SB
0 1764 1225 (        If ListFiles.List\(i\) = File.Filename Then) 1225 SB
0 1806 625 (            exists = TRUE) 625 SB
0 1848 350 (        End If) 350 SB
0 1890 250 (    Next i) 250 SB
0 1974 500 ('-- add file to list) 500 SB
0 2016 1250 (    If exists <> TRUE And File.Filename <> "" Then) 1250 SB
0 2058 975 (        ListFiles.AddItem File.Filename) 975 SB
0 2100 250 (    End If) 250 SB
0 2142 175 (End Sub) 175 SB
0 2226 500 (Sub File_DblClick \(\)) 500 SB
0 2268 500 (    CommandAdd_Click) 500 SB
0 2310 175 (End Sub) 175 SB
0 2394 650 (Sub CommandRemove_Click \(\)) 650 SB
0 2436 925 (    If ListFiles.ListIndex <> -1 Then) 925 SB
0 2478 1200 (        ListFiles.RemoveItem ListFiles.ListIndex) 1200 SB
0 2520 250 (    End If) 250 SB
0 2562 175 (End Sub) 175 SB
0 2646 625 (Sub ListFiles_DblClick \(\)) 625 SB
0 2688 575 (    CommandRemove_Click) 575 SB
0 2730 175 (End Sub) 175 SB
0 2814 725 (Sub CommandRemoveAll_Click \(\)) 725 SB
0 2856 500 (    Dim i As Integer) 500 SB
0 2898 600 (    Dim ntemp As Integer) 600 SB
0 2982 875 (    ntemp = ListFiles.ListCount - 1) 875 SB
0 3024 575 (    If ntemp <> -1 Then) 575 SB
0 3066 1650 (        ListFiles.ListIndex = 0      'select first element of list) 1650 SB
0 3108 650 (        For i = 0 To ntemp) 650 SB
0 3150 850 (            ListFiles.RemoveItem 0) 850 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 3 3
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
0 0 350 (        Next i) 350 SB
0 42 250 (    End If) 250 SB
0 84 175 (End Sub) 175 SB
0 168 550 (Sub CommandOk_Click \(\)) 550 SB
0 210 100 (    ) 100 SB
0 252 875 (    NLIST = ListFiles.ListCount - 1) 875 SB
0 294 775 (    If NLIST = -1 Then Exit Sub) 775 SB
0 336 575 (    If NLIST > 100 Then) 575 SB
0 378 2375 (        MsgBox "Too many files." + CRLF$ + "Allowed: " + Str$\(MAX_FILE\) + " files max.", 0 + 48) 2375 SB
0 420 225 (, "Error") 225 SB
0 462 400 (        Exit Sub) 400 SB
0 504 250 (    End If) 250 SB
0 588 800 (    ReDim FILES\(NLIST\) As String) 800 SB
0 630 550 (    For i = 0 To NLIST) 550 SB
0 672 1475 (        FILES\(i\) = Directory.Path + "\\" + ListFiles.List\(i\)) 1475 SB
0 714 250 (    Next i) 250 SB
0 798 425 (    Loadfile.Hide) 425 SB
0 840 450 (    CANCEL = FALSE) 450 SB
0 882 175 (End Sub) 175 SB
0 966 650 (Sub CommandAddAll_Click \(\)) 650 SB
0 1008 600 (    Dim nfile As Integer) 600 SB
0 1050 600 (    Dim ntemp As Integer) 600 SB
0 1092 500 (    Dim i As Integer) 500 SB
0 1134 500 (    Dim k As Integer) 500 SB
0 1218 750 (    nfile = File.ListCount - 1) 750 SB
0 1260 875 (    ntemp = ListFiles.ListCount - 1) 875 SB
0 1344 550 (    For k = 0 To nfile) 550 SB
0 1386 550 (        exists = FALSE) 550 SB
0 1428 1525 ('------ check wheter file has already been inserted into list) 1525 SB
0 1470 650 (        For i = 0 To ntemp) 650 SB
0 1512 1300 (            If ListFiles.List\(i\) = File.List\(k\) Then) 1300 SB
0 1554 725 (                exists = TRUE) 725 SB
0 1596 450 (            End If) 450 SB
0 1638 350 (        Next i) 350 SB
0 1680 600 ('------ add file to list) 600 SB
0 1722 1325 (        If exists <> TRUE And File.List\(k\) <> "" Then) 1325 SB
0 1764 1050 (            ListFiles.AddItem File.List\(k\)) 1050 SB
0 1806 350 (        End If) 350 SB
0 1848 250 (    Next k) 250 SB
0 1890 175 (End Sub) 175 SB
0 1974 600 (Sub CommandHelp_Click \(\)) 600 SB
0 2016 1000 (    MsgBox "Da definire", 0 + 64, "Help") 1000 SB
0 2058 175 (End Sub) 175 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 4 4
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
0 84 625 (Sub MenuFileExit_Click \(\)) 625 SB
0 126 175 (    End) 175 SB
0 168 175 (End Sub) 175 SB
0 252 625 (Sub MenuFileLoad_Click \(\)) 625 SB
0 294 425 (    Loadfile.Show) 425 SB
0 336 175 (End Sub) 175 SB
0 420 400 (Sub Form_Load \(\)) 400 SB
0 504 775 (    CRLF$ = Chr$\(13\) + Chr$\(10\)) 775 SB
0 546 425 (    cancel = TRUE) 425 SB
0 630 800 (    MenuFileSave.Enabled = FALSE) 800 SB
0 672 725 (    LabelFile.Enabled = FALSE) 725 SB
0 714 700 (    TextFile.Enabled = FALSE) 700 SB
0 756 550 (    TextFile.Text = "") 550 SB
0 798 100 (    ) 100 SB
0 840 800 (    LabelResults.Enabled = FALSE) 800 SB
0 882 775 (    TextResults.Enabled = FALSE) 775 SB
0 924 625 (    TextResults.Text = "") 625 SB
0 1008 175 (End Sub) 175 SB
0 1092 500 (Sub Form_GotFocus \(\)) 500 SB
0 1134 100 (    ) 100 SB
0 1176 625 (    If cancel = TRUE Then) 625 SB
0 1218 900 (        MenuFileSave.Enabled = FALSE) 900 SB
0 1260 925 (        MenuComputeDo.Enabled = FALSE) 925 SB
0 1302 200 (    Else) 200 SB
0 1344 900 (        MenuComputeDo.Enabled = TRUE) 900 SB
0 1386 250 (    End If) 250 SB
0 1470 450 (    cancel = FALSE) 450 SB
0 1554 175 (End Sub) 175 SB
0 1638 650 (Sub MenuComputeDo_Click \(\)) 650 SB
0 1680 500 (    Dim k As Integer) 500 SB
0 1722 600 (    Dim nstep As Integer) 600 SB
0 1764 600 (    Dim n_tot As Integer) 600 SB
0 1806 625 (    Dim n_fold As Integer) 625 SB
0 1848 650 (    Dim filename As String) 650 SB
0 1932 1150 (    ReDim eta_tmp\(1 To MAX_ELEMENTS\) As Single) 1150 SB
0 1974 1200 (    ReDim alpha_tmp\(1 To MAX_ELEMENTS\) As Single) 1200 SB
0 2016 100 (    ) 100 SB
0 2058 1100 (    ReDim alpha\(1 To MAX_ELEMENTS\) As Single) 1100 SB
0 2100 1075 (    ReDim eta1\(1 To MAX_ELEMENTS\) As Single) 1075 SB
0 2142 1075 (    ReDim eta2\(1 To MAX_ELEMENTS\) As Single) 1075 SB
0 2184 1375 (    ReDim step_yn\(1 To MAX_ELEMENTS, 1 To 2\) As Integer) 1375 SB
0 2268 1825 (    ReDim STEP_HEIGHT\(-MAX_STEP To MAX_STEP, 0 To MAX_FILE - 1\) As Single) 1825 SB
0 2352 400 (    StepAmpl.Cls) 400 SB
0 2394 700 (    LabelFile.Enabled = TRUE) 700 SB
0 2436 775 (    LabelResults.Enabled = TRUE) 775 SB
0 2478 750 (    TextResults.Enabled = TRUE) 750 SB
0 2520 275 (    T$ = "") 275 SB
0 2604 550 (    For k = 0 To NLIST) 550 SB
0 2646 675 (        filename = FILES\(k\)) 675 SB
0 2688 900 (        Call StripFilename\(filename\)) 900 SB
0 2730 200 (        ) 200 SB
0 2772 1550 (        Call ReadFile\(filename, n_tot, eta_tmp\(\), alpha_tmp\(\)\)) 1550 SB
0 2856 475 ('------ check error) 475 SB
0 2898 1675 (        nstep = Int\(Abs\(ALPHA_DC_MAX - ALPHA_DC_MIN\) / OMEGA_C + 1\)) 1675 SB
0 2940 800 (        If nstep > MAX_STEP Then) 800 SB
0 2982 2375 (            MsgBox "Too many steps." + CRLF$ + "Allowed: " + Str$\(MAX_STEP\) + " steps max.", 0 ) 2375 SB
0 3024 325 (+ 16, "Error") 325 SB
0 3066 500 (            Exit Sub) 500 SB
0 3108 350 (        End If) 350 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 5 5
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
0 0 2150 (        Call FoldAlpha\(n_tot, eta_tmp\(\), alpha_tmp\(\), n_fold, alpha\(\), eta1\(\), eta2\(\)\)) 2150 SB
0 42 1625 (        Call FindStep\(n_fold, alpha\(\), eta1\(\), eta2\(\), step_yn\(\)\)) 1625 SB
0 84 200 (        ) 200 SB
0 126 1925 (        Call StepHeight\(n_fold, alpha\(\), eta1\(\), step_yn\(\), k, STEP_HEIGHT\(\)\)) 1925 SB
0 168 575 (        T$ = T$ + CRLF$) 575 SB
0 252 725 (        TextResults.Text = T$) 725 SB
0 336 250 (    Next k) 250 SB
0 420 775 (    MenuFileSave.Enabled = TRUE) 775 SB
0 504 175 (End Sub) 175 SB
0 588 625 (Sub MenuFileSave_Click \(\)) 625 SB
0 630 425 (    SaveFile.Show) 425 SB
0 672 525 (    SaveFile.SetFocus) 525 SB
0 714 175 (End Sub) 175 SB
0 798 650 (Sub MenuHelpAbout_Click \(\)) 650 SB
0 840 2375 (        MsgBox "Program StepAmpl" + CRLF$ + "version 1.0.5, 26 October 1994" + CRLF$ + CRLF$ + ) 2375 SB
0 882 2325 ("by S. Maggi, IEN-GF" + CRLF$ + CRLF$ + "uses: eps = 0.025 omega_c", 0 + 64, "About StepAmpl") 2325 SB
0 924 175 (End Sub) 175 SB
0 1008 450 (Sub Form_Resize \(\)) 450 SB
0 1050 1175 (    TextResults.Height = StepAmpl.Height - 1650) 1175 SB
0 1092 1100 (    TextResults.Width = StepAmpl.Width - 570) 1100 SB
0 1134 175 (End Sub) 175 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 6 6
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
0 84 1150 (Sub ReadFile \(FILE$, ndata%, x_tmp\(\), y_tmp\(\)\)) 1150 SB
0 126 500 (    Dim i As Integer) 500 SB
0 168 575 (    Dim param As String) 575 SB
0 210 525 (    Dim tmp As String) 525 SB
0 252 550 (    Dim find As String) 550 SB
0 336 1925 ('-- check whether simulation was made by stepping alpha_dc in both directions) 1925 SB
0 378 550 (    find$ = "simulate") 550 SB
0 420 350 (    lenght = 1) 350 SB
0 462 1200 (    Call FindParam\(FILE$, find$, lenght, param$\)) 1200 SB
0 504 600 (    If param$ = "t" Then) 600 SB
0 546 550 (        BOTHDIR = TRUE) 550 SB
0 588 700 (    ElseIf param$ = "f" Then) 700 SB
0 630 575 (        BOTHDIR = FALSE) 575 SB
0 672 250 (    End If) 250 SB
0 756 950 ('-- find alpha_dc_min and alpha_dc_max) 950 SB
0 798 1050 (    find$ = "normalized dc current range:") 1050 SB
0 840 375 (    lenght = 25) 375 SB
0 882 1200 (    Call FindParam\(FILE$, find$, lenght, param$\)) 1200 SB
0 924 1025 (    ALPHA_DC_MIN = Val\(Left$\(param$, 12\)\)) 1025 SB
0 966 1050 (    ALPHA_DC_MAX = Val\(Right$\(param$, 12\)\)) 1050 SB
0 1050 550 ('-- find Omega_c value) 550 SB
0 1092 925 (    find$ = "normalized rf frequency") 925 SB
0 1134 375 (    lenght = 12) 375 SB
0 1176 1200 (    Call FindParam\(FILE$, find$, lenght, param$\)) 1200 SB
0 1218 625 (    OMEGA_C = Val\(param$\)) 625 SB
0 1260 600 (    eps = .025 * OMEGA_C) 600 SB
0 1302 100 (    ) 100 SB
0 1344 675 ('-- read simulation results) 675 SB
0 1386 1150 (    Open FILE$ For Input Lock Read Write As #1) 1150 SB
0 1470 1125 ('------ skip lines until start of useful data) 1125 SB
0 1512 250 (        Do) 250 SB
0 1554 775 (            Line Input #1, tmp$) 775 SB
0 1596 1225 (        Loop Until Left$\(LTrim$\(tmp$\), 3\) = "eta") 1225 SB
0 1680 650 ('------ skip one more line) 650 SB
0 1722 675 (        Line Input #1, tmp$) 675 SB
0 1806 425 ('------ read data) 425 SB
0 1848 325 (        i = 0) 325 SB
0 1890 575 (        Do Until EOF\(1\)) 575 SB
0 1932 525 (            i = i + 1) 525 SB
0 1974 1000 (            Input #1, x_tmp\(i\), y_tmp\(i\)) 1000 SB
0 2016 300 (        Loop) 300 SB
0 2058 425 (        ndata = i) 425 SB
0 2100 100 (    ) 100 SB
0 2142 300 (    Close #1) 300 SB
0 2226 175 (End Sub) 175 SB
0 2310 1100 (Sub FindParam \(FILE$, find$, length, param$\)) 1100 SB
0 2352 600 (    Dim lfind As Integer) 600 SB
0 2394 525 (    Dim tmp As String) 525 SB
0 2436 575 (    Dim t_tmp As String) 575 SB
0 2520 1150 (    Open FILE$ For Input Lock Read Write As #1) 1150 SB
0 2604 1050 ('-- skip lines until string find$ is found) 1050 SB
0 2646 550 (    lfind = Len\(find$\)) 550 SB
0 2688 625 (    find$ = LCase$\(find$\)) 625 SB
0 2730 150 (    Do) 150 SB
0 2772 675 (        Line Input #1, tmp$) 675 SB
0 2814 1275 (        t_tmp$ = LCase$\(Left$\(LTrim$\(tmp$\), lfind\)\)) 1275 SB
0 2856 725 (    Loop Until t_tmp$ = find$) 725 SB
0 2940 1175 ('-- read parameter string, with lenght 'lenght') 1175 SB
0 2982 1225 (    param$ = LCase$\(Right$\(RTrim$\(tmp$\), length\)\)) 1225 SB
0 3024 300 (    Close #1) 300 SB
0 3066 175 (End Sub) 175 SB
0 3150 2000 (Sub FoldAlpha \(n_max%, eta_tmp\(\), alpha_tmp\(\), n_fold%, alpha\(\), eta1\(\), eta2\(\)\)) 2000 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 7 7
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
0 0 525 (    Dim i1 As Integer) 525 SB
0 42 525 (    Dim i2 As Integer) 525 SB
0 84 100 (    ) 100 SB
0 126 675 (    If BOTHDIR = FALSE Then) 675 SB
0 168 650 (        For i = 1 To n_max) 650 SB
0 210 875 (            alpha\(i\) = alpha_tmp\(i\)) 875 SB
0 252 800 (            eta1\(i\) = eta_tmp\(i\)) 800 SB
0 294 600 (            eta2\(i\) = 0#) 600 SB
0 336 350 (        Next i) 350 SB
0 378 550 (        n_fold = n_max) 550 SB
0 420 1300 (    Else                            'BOTHDIR is true) 1300 SB
0 462 350 (        i1 = 0) 350 SB
0 504 250 (        Do) 250 SB
0 546 575 (            i1 = i1 + 1) 575 SB
0 588 925 (            alpha\(i1\) = alpha_tmp\(i1\)) 925 SB
0 630 850 (            eta1\(i1\) = eta_tmp\(i1\)) 850 SB
0 672 1325 (        Loop Until alpha_tmp\(i1 + 1\) <= alpha_tmp\(i1\)) 1325 SB
0 756 925 ('------ no. of different alpha values) 925 SB
0 798 475 (        n_fold = i1) 475 SB
0 882 1225 (        If alpha_tmp\(i1 + 1\) = alpha_tmp\(i1\) Then) 1225 SB
0 924 575 (            i2 = i1 + 1) 575 SB
0 966 300 (        Else) 300 SB
0 1008 475 (            i2 = i1) 475 SB
0 1050 350 (        End If) 350 SB
0 1092 250 (        Do) 250 SB
0 1134 575 (            i1 = i1 + 1) 575 SB
0 1176 575 (            i2 = i2 - 1) 575 SB
0 1218 850 (            eta2\(i2\) = eta_tmp\(i1\)) 850 SB
0 1260 725 (        Loop Until i1 = n_max) 725 SB
0 1302 250 (    End If) 250 SB
0 1386 175 (End Sub) 175 SB
0 1470 650 (Sub StripFilename \(fname$\)) 650 SB
0 1512 500 (    Dim j As Integer) 500 SB
0 1596 225 (    j = 0) 225 SB
0 1638 475 (    strip$ = fname$) 475 SB
0 1680 150 (    Do) 150 SB
0 1722 1200 (        strip$ = Right$\(strip$, Len\(strip$\) - j\)) 1200 SB
0 1764 750 (        j = InStr\(strip$, "\\"\)) 750 SB
0 1806 500 (    Loop Until j = 0) 500 SB
0 1890 875 (    StepAmpl.TextFile.text = strip$) 875 SB
0 1932 700 (    t$ = t$ + strip$ + CRLF$) 700 SB
0 1974 1250 (    t$ = t$ + "--------------------------" + CRLF$) 1250 SB
0 2016 175 (End Sub) 175 SB
0 2100 1700 (Sub FindStep \(ndata%, alpha\(\), eta1\(\), eta2\(\), step_yn\(\) As Integer\)) 1700 SB
0 2142 500 (    Dim i As Integer) 500 SB
0 2226 375 ('-- clear array) 375 SB
0 2268 725 (    For i = 1 To MAX_ELEMENTS) 725 SB
0 2310 750 (        step_yn\(i, 1\) = NOSTEP) 750 SB
0 2352 750 (        step_yn\(i, 2\) = NOSTEP) 750 SB
0 2394 250 (    Next i) 250 SB
0 2436 100 (    ) 100 SB
0 2478 550 (    For i = 2 To ndata) 550 SB
0 2520 200 (        ) 200 SB
0 2562 1325 (        If TestStep\(eta1\(i\), eta1\(i - 1\)\) = TRUE Then) 1325 SB
0 2604 1275 (            step_yn\(i, 1\) = CInt\(eta1\(i\) / OMEGA_C\)) 1275 SB
0 2646 350 (        End If) 350 SB
0 2688 1325 (        If TestStep\(eta2\(i\), eta2\(i - 1\)\) = TRUE Then) 1325 SB
0 2730 1275 (            step_yn\(i, 2\) = CInt\(eta2\(i\) / OMEGA_C\)) 1275 SB
0 2772 350 (        End If) 350 SB
0 2814 100 (    ) 100 SB
0 2856 250 (    Next i) 250 SB
0 2898 175 (End Sub) 175 SB
0 2982 2075 (Sub StepHeight \(ndata%, alpha\(\), eta1\(\), step_yn\(\) As Integer, col%, STEP_HEIGHT\(\)\)) 2075 SB
0 3024 500 (    Dim i As Integer) 500 SB
0 3066 500 (    Dim j As Integer) 500 SB
0 3108 600 (    Dim order As Integer) 600 SB
0 3150 700 (    Dim order_min As Integer) 700 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 8 8
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
0 0 700 (    Dim order_max As Integer) 700 SB
0 42 600 (    Dim height As Single) 600 SB
0 126 600 ('-- initialize variables) 600 SB
0 168 1100 (    order_min = CInt\(ALPHA_DC_MIN / OMEGA_C\)) 1100 SB
0 210 1100 (    order_max = CInt\(ALPHA_DC_MAX / OMEGA_C\)) 1100 SB
0 294 950 (    For order = order_min To order_max) 950 SB
0 336 650 (        For i = 2 To ndata) 650 SB
0 378 1650 (            If step_yn\(i, 1\) = order Or step_yn\(i, 2\) = order Then) 1650 SB
0 420 400 (                ) 400 SB
0 462 525 (                j = i) 525 SB
0 504 450 (                Do) 450 SB
0 546 725 (                    j = j + 1) 725 SB
0 588 1950 (                Loop Until \(step_yn\(j, 1\) <> order And step_yn\(j, 2\) <> order\)) 1950 SB
0 672 1300 (                height = alpha\(j - 1\) - alpha\(i - 1\)) 1300 SB
0 714 1200 (                STEP_HEIGHT\(order, col\) = height) 1200 SB
0 756 400 (                ) 400 SB
0 798 2375 (                t$ = t$ + "step: " + Format$\(order, F3_0$\) + "    height: " + Format$\(height, F) 2375 SB
0 840 325 (6_4$\) + CRLF$) 325 SB
0 882 600 (                Exit For) 600 SB
0 924 450 (            End If) 450 SB
0 966 350 (        Next i) 350 SB
0 1008 350 (    Next order) 350 SB
0 1050 175 (End Sub) 175 SB
0 1134 900 (Sub WriteFile \(FILE$, STEP_HEIGHT\(\)\)) 900 SB
0 1176 500 (    Dim i As Integer) 500 SB
0 1218 550 (    Dim row As Integer) 550 SB
0 1260 550 (    Dim ord As Integer) 550 SB
0 1302 700 (    Dim nstep_min As Integer) 700 SB
0 1344 700 (    Dim nstep_max As Integer) 700 SB
0 1428 1100 (    Open FILE$ For Output Access Write As #2) 1100 SB
0 1470 1175 (        Print #2, "Program: StepAmpl   v.1.0.5") 1175 SB
0 1512 1325 (        Print #2, "Automatic analysis of step height") 1325 SB
0 1554 1750 (        Print #2, "--------------------------------------------------") 1750 SB
0 1596 200 (        ) 200 SB
0 1638 1250 (        text$ = Format$\(Now, "dddd  dd mmmm yyyy"\)) 1250 SB
0 1680 825 (        Print #2, "Date: "; text$) 825 SB
0 1722 1000 (        text$ = Format$\(Now, "hh:mm:ss"\)) 1000 SB
0 1764 825 (        Print #2, "Time: "; text$) 825 SB
0 1806 425 (        Print #2,) 425 SB
0 1848 625 (        text$ = Str$\(eps\)) 625 SB
0 1890 1425 (        Print #2, "Recognized step interval, eps:"; text$) 1425 SB
0 1932 425 (        Print #2,) 425 SB
0 1974 900 (        Print #2, "Processed files:") 900 SB
0 2016 425 (        Print #2,) 425 SB
0 2058 650 (        For i = 0 To NLIST) 650 SB
0 2100 1025 (            text$ = Format$\(i + 1, "000"\)) 1025 SB
0 2142 1075 (            Print #2, text$; ": "; FILES\(i\)) 1075 SB
0 2184 350 (        Next i) 350 SB
0 2226 100 (    ) 100 SB
0 2268 1750 (        Print #2, "--------------------------------------------------") 1750 SB
0 2310 700 (        Print #2, "Results:") 700 SB
0 2352 425 (        Print #2,) 425 SB
0 2394 1275 (        Print #2, "File:"; ","; Spc\(3\); "Step: -->") 1275 SB
0 2436 625 (        Print #2, Spc\(5\);) 625 SB
0 2478 200 (        ) 200 SB
0 2520 1275 (        nstep_min = Int\(ALPHA_DC_MIN / OMEGA_C - 1\)) 1275 SB
0 2562 1275 (        nstep_max = Int\(ALPHA_DC_MAX / OMEGA_C + 1\)) 1275 SB
0 2646 1000 (        For ord = nstep_min To nstep_max) 1000 SB
0 2688 975 (            text$ = Format$\(ord, F3_0$\)) 975 SB
0 2730 1025 (            Print #2, ","; Spc\(5\); text$;) 1025 SB
0 2772 400 (        Next ord) 400 SB
0 2814 425 (        Print #2,) 425 SB
0 2856 200 (        ) 200 SB
0 2898 700 (        For row = 0 To NLIST) 700 SB
0 2940 1250 (            text$ = "  " + Format$\(row + 1, F3_0$\)) 1250 SB
0 2982 700 (            Print #2, text$;) 700 SB
0 3066 1100 (            For ord = nstep_min To nstep_max) 1100 SB
0 3108 1525 (                text$ = Format$\(STEP_HEIGHT\(ord, row\), F6_4$\)) 1525 SB
0 3150 1125 (                Print #2, ","; Spc\(2\); text$;) 1125 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 9 9
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
0 0 500 (            Next ord) 500 SB
0 42 200 (        ) 200 SB
0 84 525 (            Print #2,) 525 SB
0 126 400 (        Next row) 400 SB
0 210 300 (    Close #2) 300 SB
0 294 175 (End Sub) 175 SB
0 378 700 (Function TestStep \(r, r_old\)) 700 SB
0 420 500 (    Dim rn As Single) 500 SB
0 504 500 (    TestStep = FALSE) 500 SB
0 588 925 ('-- test whether r values are on step) 925 SB
0 630 825 (    If Abs\(r - r_old\) <= eps Then) 825 SB
0 714 1050 ('------ test whether it is an integer step) 1050 SB
0 756 1000 (        rn = CInt\(r / OMEGA_C\) * OMEGA_C) 1000 SB
0 798 1125 (        If \(r <= rn\) And \(r + eps\) >= rn Then) 1125 SB
0 840 675 (            TestStep = TRUE) 675 SB
0 882 1200 (        ElseIf \(r > rn\) And \(r - eps\) <= rn Then) 1200 SB
0 924 675 (            TestStep = TRUE) 675 SB
0 966 350 (        End If) 350 SB
0 1050 250 (    End If) 250 SB
0 1092 300 (End Function) 300 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 10 10
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
0 84 650 (Sub CommandCancel_Click \(\)) 650 SB
0 126 200 (    Beep) 200 SB
0 168 650 (    File.Pattern = "*.stp") 650 SB
0 210 900 (    TextFilename.Text = File.Pattern) 900 SB
0 252 425 (    SaveFile.Hide) 425 SB
0 294 175 (End Sub) 175 SB
0 378 400 (Sub Form_Load \(\)) 400 SB
0 420 950 (    Drive.Drive = Loadfile.Drive.Drive) 950 SB
0 462 1100 (    Directory.Path = Loadfile.Directory.Path) 1100 SB
0 504 1300 (    TextDirectory.Text = Loadfile.TextDirectory.Text) 1300 SB
0 546 100 (    ) 100 SB
0 588 750 (    File.Path = Directory.Path) 750 SB
0 630 650 (    File.Pattern = "*.stp") 650 SB
0 672 900 (    TextFilename.Text = File.Pattern) 900 SB
0 714 175 (End Sub) 175 SB
0 798 475 (Sub Drive_Change \(\)) 475 SB
0 840 800 (    Directory.Path = Drive.Drive) 800 SB
0 882 175 (End Sub) 175 SB
0 966 575 (Sub Directory_Change \(\)) 575 SB
0 1008 750 (    File.Path = Directory.Path) 750 SB
0 1050 975 (    TextDirectory.Text = Directory.Path) 975 SB
0 1092 175 (End Sub) 175 SB
0 1176 550 (Sub CommandOk_Click \(\)) 550 SB
0 1260 775 (    If File.Listcount <> 0 Then) 775 SB
0 1302 2300 (        r = MsgBox\("File already exists!" + CRLF$ + "Overwrite?", 4 + 32 + 256, "Save file"\)) 2300 SB
0 1344 525 (        If r = 7 Then) 525 SB
0 1386 850 (            File.Pattern = "*.stp") 850 SB
0 1428 1100 (            TextFilename.Text = File.Pattern) 1100 SB
0 1470 500 (            Exit Sub) 500 SB
0 1512 350 (        End If) 350 SB
0 1554 250 (    End If) 250 SB
0 1638 1500 (    file_to_save$ = Directory.Path + "\\" + TextFilename.Text) 1500 SB
0 1680 1200 (    Call WriteFile\(file_to_save$, STEP_HEIGHT\(\)\)) 1200 SB
0 1722 100 (    ) 100 SB
0 1764 650 (    File.Pattern = "*.stp") 650 SB
0 1806 900 (    TextFilename.Text = File.Pattern) 900 SB
0 1848 425 (    SaveFile.Hide) 425 SB
0 1890 525 (    StepAmpl.SetFocus) 525 SB
0 1932 175 (End Sub) 175 SB
0 2016 650 (Sub TextFilename_Change \(\)) 650 SB
0 2058 900 (    File.Pattern = TextFilename.Text) 900 SB
0 2100 175 (End Sub) 175 SB
0 2184 425 (Sub File_Click \(\)) 425 SB
0 2226 925 (    TextFilename.Text = File.Filename) 925 SB
0 2268 175 (End Sub) 175 SB
0 2352 500 (Sub File_DblClick \(\)) 500 SB
0 2394 925 (    TextFilename.Text = File.Filename) 925 SB
0 2436 175 (End Sub) 175 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Trailer
SVDoc restore
end
%%Pages: 10
%%DocumentSuppliedResources: procset Win35Dict 3 1

%%DocumentNeededResources: font Courier

%%EOF
